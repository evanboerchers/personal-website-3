---
layout: blog
title: 'Simplify Svelte Site Content with MDsveX'
description: 'How to leverage MDsveX as a markdown renderer. Streamline how you write content for your website.'
date: 2025-07-14
tags:
  - 'tutorial'
  - 'web development'
keywords:
  - 'tutorial'
  - 'svelte'
  - 'mdsvex'
  - 'web'
publish: false
---

<script>
	import { Note } from  '$svx'
	import { Link } from  '$svx'
</script>

Lets face it when it comes to writing content for the web, whether it be a blog, technical docs or any other text based document, using html is a pain. The syntax is tedious and frankly just is not meant for writing large text articles.

Wouldn't it be nice to be write content for our website in a language better suited for text documents? Personally I adore Markdown, it has simple readable syntax while still being feature rich. Being able to write content for our Svelte site with markdown would greatly improve our quality of life.

Introducing **MDsveX**! Not only can we write and render content using markdown, but we can also integrate seamlessly with svelte to render out components and other svelte code in the same document.

<Note>Check out the <Link href='https://evanboerchers.github.io/mdsvex-tutorial'>tutorial site</Link> for a live demonstration of this guide in action. You can also view the its source code on <Link href='https://github.com/evanboerchers/mdsvex-tutorial'>GitHub</Link>.</Note>

## Setup

SvelteKit apps can be bootstrapped to include MDsveX out of the box using the SvelteKit CLI. If you have not done this, setup is still simple. Install MDSveX &mdash; `npm install --save-dev mdsvex` &mdash; then add MDSveX as a preproccessor step, specifying `.svx` and/or `.md` as valid file extensions. This can be done through the `svelte.config.cjs`:

```js
import { mdsvex } from 'mdsvex';

const config = {
	preprocess: [
		mdsvex({
			extensions: ['.md', '.svx']
		})
	],
	extensions: ['.svelte', '.svx', '.md']
};

export default config;
```

By adding MDsveX to the config, files with the specified extensions, in this case `.svx` and `.md` will have there contents transformed to a proper sveltified output. The svelte compiler can then handle them as they would any other `.svelte` file.

## Rendering Content

With MDsveX setup in our Svelte app the first step is to write some content for our website. Create a valid MDsveX file. We can keep it simple for now and write a markdown file:

```svelte
# My Article

Article contents for my svelte site.
```

Or use go with a `.svx` type file to use both markdown and svelte in the same file.

```svelte
<script lang='ts'>
	import Component from '$lib/component.svelte'
</script>

# My Article

My fancy article with svelte components.

<Component />
```

We will now be able to import and use MDsveX associated files as svelte components and use them as you would any svelte component.

```svelte
<script lang="ts">
	import Article from '$lib/content/article.svx';
</script>

<Article />
```

### Adding Typography

Our MDSveX file content will now be rendered on our website as html, however, there will be no styling applied by default, making our article boring and plain. Generally we want to have some beautifal document styling applied to all our text based web content. The best way to do this is by applying some sort of [Typography](https://en.wikipedia.org/wiki/Web_typography).

There are many ways to apply typography, one way would be to make a custom typography stylesheet and apply it either site wide or to the article itself. Personally, I use a lot of [tailwindcss](https://tailwindcss.com/), tailwind provides an official [typography plugin](https://github.com/tailwindlabs/tailwindcss-typography). Simply install and configure the plugin. Then add the `prose` class to your article. Now all our html will have some nice default typography styling applied (feel free to customize).

```svelte
<script lang="ts">
	import Article from '$lib/content/article.svx';
</script>

<Article class="prose" />
```

## Using Frontmatter

Often times we will want our documents to contain metadata. This could be used to render additional content or to provide related data to be used in document searching or SEO. MdsveX makes this data easy to handle.

Define frontmatter by enclosing a yaml block in `---` characters:

```svelte
---
title: My Awesome Article
author: Fancy Dev
---
```

Frontmatter can be used in the document itself by using brackets

```svelte
---
title: My Awesome Article
author: Fancy Dev
---

# {title}
```

Metadata will also be available when importing your document, by importing the `metadata` export.

```svelte
<script lang="ts">
	import Article, { metadata } from '$lib/content/article.svx';
</script>

<div class="prose">
	<Article />
	<hr />
	<p><b>Author:</b> {metadata.author}</p>
</div>
```

## Using Svelte Components

One of the benefits of MDsveX is the fact that we can write svelte code alongside our markdown. This means that we can use Svelte components in our document just as we would anywhere else in our svelte app. For instance this simple counter component can be used in our `.svx` file in the same way it would anywhere else in our app.

```svelte
<script>
	let count = 0;

	function increment() {
		count += 1;
	}
</script>

<p>You clicked {count} {count === 1 ? 'time' : 'times'}.</p>
<button on:click={increment}> Click me </button>
```

Write out the svelte code to import and render our counter.

```svelte
<script lang='ts'>
import Counter from '$lib/components/counter.svelte'
</script>

---

title: My Awesome Article
author: Fancy Dev

---

# {title}

Here is a svelte component inserted alongside markdown!

<Counter />
```

## Applying Layouts

Most of the time we will want our text content to contain similiar components or have have consistent formatting. Rather than having to handle this for every MDsveX document we write we can instead create some generic layouts and then apply it to all or specifc files. 

To create a layout simply create a svelte component that has `children` as a prop as well as any metadata you want to use in the layout. For example we can create a simple svelte component to act as a layout for an article:

```svelte
<script lang="ts">
	import { ComponentExample } from '$lib/components'

	import { author, children} = $props()
</script>

<article class='article-style'>
	{@render children?.()}
	<hr/>
    <p><b>Author:</b> {author}</p>
</arrticle>

<ComponentExample/>
```

The children prop will be the sveltified MDsveX file content, and the author prop will come from the frontmatter. To start using this layout register it through the mdsvex plugin.

```js
	mdsvex({
		layout: {
			article: 'src/lib/layout/article.svelte',
		}
	})
```

The layout can automatically be applied to MDsveX document by specifying it in the `layout` frontmatter.

```svelte
---
layout: article
title: My Awesome Article
author: Fancy Dev
---
```

Now, when we import and use our MDsveX document it will be automatically inserted into specified layout component.

## Syntax Highlighting

Often times we will want to use code blocks in our content. This necessitates the need for [syntax highlighting](https://en.wikipedia.org/wiki/Syntax_highlighting). MDsveX adds this functionality by default using [Prismjs](https://prismjs.com/). However, prism is an older library and I recommend using [Shiki](https://shiki.matsu.io/) instead. To configure this you can add a custom highlight function to the MdsveX configuration.

```js
import { createHighlighter } from 'shiki';

const theme = 'one-dark-pro';
const highlighter = await createHighlighter({
	themes: [theme],
	langs: ['javascript', 'typescript', 'markdown', 'svelte']
});

mdsvex({
	highlight: {
		highlighter: async (code, lang = 'text') => {
			const html = escapeSvelte(
				highlighter.codeToHtml(code, { lang, theme })
			);
			return `{@html \`${html}\` }`;
		}
	}
})

```

## Rehype and Remark

At its core MDSveX is built on top of the [unified](https://unifiedjs.com/) ecosystem. This means that useful plugins can be added to allow even further customization. You can use [remark](https://github.com/remarkjs) to customize the transformation of your documents markdown and [rehype](http://github.com/rehypejs/rehype) to customize the HTML transform.

Remark and rehype plugins can be slotted into the MDSveX configuration.

```js
mdsvex(
	{
		remarkPlugins: [someRemarkPlugin]
		rehypePlugins: [someRehypePlugin]
	}
)
```

<Note>
	I have had issues using some remark and rehype plugins, it is not a flawless integration. Additionally the maintainers have expressed the desire to move away from unified. Current and future support for this toolchain in MDsveX is questionable.
</Note>

## Conclusion

We have covered how to setup your svelte app with MDsveX. Hopefully I have demonstrated the power of this tool and how to leverage it to make writing content for your website much easier. Obviously there is more work that can be done to create an effectice content system for your website, but I hope this tutorial has unlocked the potential of MDsveX in your Svelte applications.
