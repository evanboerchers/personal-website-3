---
layout: blog
title: 'Simplify Svelte Site Content with MDsveX'
description: 'How to leverage MDsveX as a markdown renderer. Streamline how you write content for your website.'
date: 2025-07-14
tags:
  - 'tutorial'
  - 'web development'
keywords:
  - 'tutorial'
  - 'svelte'
  - 'mdsvex'
  - 'web'
publish: false
---

<script>
	import { Note } from  '$svx'
	import { Link } from  '$svx'
</script>

Lets face it when it comes to writing content for the web, whether it be a blog, technical documentation or any other text based document, using html is a pain. The syntax is tedious and frankly just is not meant for writing large text articles.

Wouldn't it be nice to be write content for our website in a language better suited for text documents? Personally I adore Markdown, it has simple readable syntax while still being feature rich. Being able to write content for our Svelte site with markdown would greatly improve our quality of life.

In comes MDsveX! Not only can we write and render content using markdown but we can also integrate seamlessly with svelte to render out components and other svelte code in the same document.

<Note>Check out the <Link href='https://evanboerchers.github.io/mdsvex-tutorial'>tutorial site</Link> for a live demonstration of this guide in action. You can also view the full source code on <Link href='https://github.com/evanboerchers/mdsvex-tutorial'>GitHub</Link>.</Note>

## Setup

SvelteKit apps can be bootstrapped to include MDsveX out of the box using the SvelteKit CLI. If this is not the case for your app, setup is simple. With mdsvex installed (`npm install --save-dev mdsvex`), add mdsvex as a preproccessor step and include `.svx` and/or `.md` file extensions. This can be one through the `svelte.config.cjs` file which should look something like:

```js
import { mdsvex } from 'mdsvex';
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
/** @type {import('@sveltejs/kit').Config} */
const config = {
	preprocess: [
		vitePreprocess(),
		mdsvex({
			extensions: ['.md', '.svx']
		})
	],
	kit: {
		adapter: adapter()
	},
	extensions: ['.svelte', '.svx', '.md']
};

export default config;
```

With this setup MDsveX will be added as a as a preprocessor step. MDsveX will compile files with the specified extensions (`.svx` and `.md`) to a proper `.svelte` component.

## Rendering Content

With MDsveX setup in our Svelte app the first step is to write some content for our website. Create a valid file type as listed in the config. We could keep it simple and write a markdown file

```markdown
# My Article

Article contents for my svelte site.
```

Or use a `.svx` formatted file to use markdown syntax as well svelte language features.

```markdown
<script lang='ts'>
	import Component from '$lib/component.svelte'
</script>

# My Article

My fancy article with svelte components.

<Component />
```

We will now be able to import and use MDsveX associated files as svelte components and use as you would any svelte component. MDsveX will tag care of the preprocessing and our content will now be rendered as html.

```markdown
<script lang="ts">
	import Article from '$lib/content/article.svx';
</script>

<Article />
```

### Adding Typography

Our content will be rendered as html, however there will be no styling applied by default, meaning our article will just be boring plain html. Generally we want to have some default styling applied so that all text document based content will look beautiful and consistent. The best way to do this is by applying some sort of Typography. Typography is essentially a set of style rules that specify text, spacing and other properties that will make our document legible and aestetic.

There are many ways to apply typography, one way would be to make a custom typography stylesheet and apply it either site wide or to the article itself. Personally, I use a lot of [tailwindcss](https://tailwindcss.com/), tailwind provides an official [typography plugin](https://github.com/tailwindlabs/tailwindcss-typography). Simply install the plugin and then apply a `prose` class to your article. Now all our html will have some nice default typography styling applied (feel free to customize!).

```markdown
<script lang="ts">
	import Article from '$lib/content/article.svx';
</script>

<Article class="prose" />
```

## Using Frontmatter

Often times we will want our documents to contain metadata. This could be used to render additional content or to provide associated data to be used in document searching or SEO. Mdsvex makes this data easy to handle.

Define frontmatter at the start of your document using the syntax:

```markdown
---
title: My Awesome Article
author: Fancy Dev
---
```

Frontmatter can be used in the document itself by using brackets

```markdown
---
title: My Awesome Article
author: Fancy Dev
---

# {title}
```

metadata will also be available when importing your document, by importing the `metadata` export.

```markdown
<script lang="ts">
	import Article from '$lib/content/article.svx';
</script>

<div class="prose">
	<Article />
	<hr />
	<p><b>Author:</b> {metadata.author}</p>
</div>
```

## Using Svelte Components

One of the massive benifits of MDSveX is the fact that we can write svelte code alongside our markdown. This means htat we can use Svelte components in our document just as we would anywhere else in our svelte app. Lets make a simple component that we can use in

```markdown
<script>
	let count = 0;

	function increment() {
		count += 1;
	}
</script>

<p>You clicked {count} {count === 1 ? 'time' : 'times'}.</p>
<button on:click={increment}> Click me </button>
```

We can write svelte code in our SVX file, allowing us to import and use the counter.

```markdown
<script lang='ts'>
import Counter from '$lib/components/counter.svelte'
</script>

---

title: My Awesome Article
author: Fancy Dev

---

# {title}

Here is a svelte component inserted alongside markdown!

<Counter />
```

## Applying Layouts

Another fantastic mdsvex feature is layouts. Many times we will want our text content to contain similiar components or have have consistent formatting. Rather than having to having to handle this for every SVX document we write we can instead create some generic layouts and then apply it to our SVX documents. For instance, our current basic example is rendering an Article, we are also doing a simple rendering the author below the article. We want all our articles to include the author name at the bottom. We also would want to automatically apply our typography class, and perhaps some additional padding to the article.

We can use layouts to handle this common formatting. Simply define a svelte component, with the props being the metadata properties a chilren property for the actual content of the SVX document.

```markdown
<script lang="ts">
</script>
```

Our layouts need to be registered through the mdsvex plugin.

```js
...
	preprocess: [
		vitePreprocess(),
		mdsvex({
			layout: {
				article: 'src/lib/layout/article.svelte',
			},
			extensions: ['.md', '.svx']
		})
	]
...
```

The layout can automatically be applied to our SVX document by specifying it in the `layout` frontmatter.

```markdown
---
layout: article
title: My Awesome Article
author: Fancy Dev
---
```

Now we we render our article, with the layout component already applied as a parent to the article content.

## Syntax Highlighting

Often times code blocks will be used in our document. This necessitates the need for syntax highlighting. MDSveX adds this functionality by default using [Prismjs](https://prismjs.com/). However, prism is an older library and I recommend using [Shiki](https://shiki.matsu.io/). To configure this you can add a custom highlight function to the mdsvex plugin.

```js
import { createHighlighter } from 'shiki';

const theme = 'one-dark-pro';
const highlighter = await createHighlighter({
	themes: [theme],
	langs: ['javascript', 'typescript', 'markdown', 'svelte']
});

mdsvex({
	highlight: {
		highlighter: async (code, lang = 'text') => {
			const html = escapeSvelte(
				highlighter.codeToHtml(code, { lang, theme })
			);
			return `{@html \`${html}\` }`;
		}
	}
})

```

## Rehype and Remark

At its core MDSveX is built on top of the [unified](https://unifiedjs.com/) ecosystem. This means that useful plugins can be added to allow even further customization. You can use [remark](https://github.com/remarkjs) to customize the transformation of your documents markdown and [rehype](http://github.com/rehypejs/rehype) to customize the HTML transform.


Remark and rehype plugins can be slotted into the mdsvex configuration.

```js
mdsvex(
	{
		remarkPlugins: [someRemarkPlugin]
		rehypePlugins: [someRehypePlugin]
	}
)
```

<Note>
	I have had issues using some remark and rehype plugins, it is not a flawless integration. Additionally the maintainers have expressed the desire to move away from unified. Current and future support for this toolchain in MDsveX is questionable.
</Note>

## Conclusion

We have covered how to setup your svelte app with mdsvex. Hopefully I have demonstrated the power of this plugin and how to leverage it to create clean easy to work with content for your website. Obviously there is more work that can be done to create an effectice content system for your website, but I hope this tutorial has unlocked the potential of mdsvex in your Svelte applications.
